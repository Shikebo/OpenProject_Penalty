package telegram

import (
	"Penalty/internal/database"
	openprojectoauth "Penalty/internal/openproject_oauth"
	"Penalty/penalty"
	service "Penalty/telegram/service"
	"database/sql"
	"fmt"
	"log"
	"strconv"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type User struct {
	TelegramID   string
	AccessToken  string
	RefreshToken string
	IsAuthorized bool
}

type TelegramBot struct {
	token string
	bot   *tgbotapi.BotAPI
	db    *sql.DB
}

func NewBot(newToken string, db *sql.DB) *TelegramBot {
	return &TelegramBot{token: newToken, db: db}
}

func (tgbot *TelegramBot) StartBot() {
	var err error
	tgbot.bot, err = tgbotapi.NewBotAPI(tgbot.token)
	if err != nil {
		log.Fatalf("Failed to create bot API: %v", err)
	}

	tgbot.bot.Debug = true
	log.Printf("Initialize Telegram_Bot: %s", tgbot.bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := tgbot.bot.GetUpdatesChan(u)

	for update := range updates {
		if update.CallbackQuery != nil {
			tgbot.CallBack(update, tgbot.db) // –ü–µ—Ä–µ–¥–∞–µ–º db
		} else if update.Message != nil && update.Message.IsCommand() {
			tgbot.Command(update)
		}
	}
}

// –í—ã–Ω–µ—Å–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ Command
func (tbot *TelegramBot) Command(update tgbotapi.Update) {
	command := update.Message.Command()
	switch command {
	case "start":
		tbot.auth(update)

	case "get_Informations":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
		msg.ReplyMarkup = Menu // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Menu –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
		tbot.sendMessage(msg)

	default:
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
		tbot.sendMessage(msg)
	}
}

func (tbot *TelegramBot) handleGetCommand(update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç OpenProject\n\n"+
			"/get_Informations - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"+
			"/create_Task - –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É.\n\n"+
			"/delete_Task - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É.")
	tbot.sendMessage(msg)
}

func (tbot *TelegramBot) auth(update tgbotapi.Update) {
	telegramID := update.Message.Chat.ID
	telegramIDStr := strconv.FormatInt(telegramID, 10)

	if tokens, exists := openprojectoauth.UserTokens[telegramIDStr]; exists && tokens.AccessToken != "" {
		tbot.handleGetCommand(update)
	} else {
		log.Println("–¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		authURL := "http://146.19.183.11/dc/oauth/authorize?response_type=code&client_id=50jnK5XQFJ2m-6V8_iYcVFr5s9uCzJTBlJqIyXX7nEM&redirect_uri=http://localhost:3000/callback&scope=api_v3&prompt=consent&state=" + telegramIDStr
		authMsg := tgbotapi.NewMessage(update.Message.Chat.ID, "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ OpenProject –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ:\n"+authURL)
		tbot.sendMessage(authMsg)
	}
}

func (tbot *TelegramBot) CallBack(update tgbotapi.Update, db *sql.DB) {
	data := update.CallbackQuery.Data
	chatID := update.CallbackQuery.From.ID
	firstName := update.CallbackQuery.From.FirstName
	lastName := update.CallbackQuery.From.LastName

	var text string

	log.Printf("Received callback query data: %s", data)

	switch data {

	case "callback_mytasks":
		telegramID := update.CallbackQuery.From.ID
		log.Printf("–ü–æ–ª—É—á–µ–Ω Telegram ID: %d", telegramID)

		// –ü–æ–ª—É—á–∞–µ–º OpenProject ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
		openProjectID, err := database.GetOpenProjectIDByTelegramID(db, telegramID)
		if err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å OpenProject ID –¥–ª—è Telegram ID %d: %v", telegramID, err)
			text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ OpenProject. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
			break
		}

		log.Printf("–ü–æ–ª—É—á–µ–Ω OpenProject ID: %d", openProjectID)

		// –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏
		tasks, err := service.GetUserTasks(db, openProjectID)
		if err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è OpenProject ID %d: %v", openProjectID, err)
			text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á."
		} else {
			text = service.FormatMyTasksForTelegram(tasks)
		}

	case "callback_penalties":
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s %s –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏", firstName, lastName)
		overdueTasks, err := service.GetOverdueTasks()
		if err != nil {
			text = fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: %v", err)
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: %v", err)
		} else {
			if len(overdueTasks) == 0 {
				text = "–ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."
			} else {
				text = service.FormatOverdueTasksForTelegram(overdueTasks)
			}
		}

	case "callback_mypenalty":
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s %s –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ —à—Ç—Ä–∞—Ñ—ã", firstName, lastName)
		dueDate := time.Now().Add(-48 * time.Hour)
		overdueDays := time.Since(dueDate).Hours() / 24
		penaltyTask := penalty.CalculatePenalty("Task", overdueDays)
		penaltyBug := penalty.CalculatePenalty("Bug", overdueDays)
		penaltyFeature := penalty.CalculatePenalty("Feature", overdueDays)
		penaltyEpic := penalty.CalculatePenalty("Epic", overdueDays)
		text = fmt.Sprintf(
			"–í–∏–¥—ã —à—Ç—Ä–∞—Ñ–æ–≤:\n\n"+
				"üìù –ó–∞–¥–∞—á–∞ (Task): %.2f —Å–æ–º–æ–Ω–∏\n"+
				"üêû –ë–∞–≥ (Bug): %.2f —Å–æ–º–æ–Ω–∏\n"+
				"‚ú® –§–∏—á–∞ (Feature): %.2f —Å–æ–º–æ–Ω–∏\n"+
				"üìö –≠–ø–∏–∫ (Epic): %.2f —Å–æ–º–æ–Ω–∏\n",
			penaltyTask, penaltyBug, penaltyFeature, penaltyEpic)

	case "callback_notifications":
		
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s %s –∑–∞–ø—Ä–æ—Å–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", firstName, lastName)
		notifications, err := service.GetNotifications()
		if err != nil {
			text = fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %v", err)
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %v", err)
		} else {
			text = service.FormatNotificationsForTelegram(notifications)
		}

	default:
		text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."
		log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: %s", data)
	}

	msg := tgbotapi.NewMessage(chatID, text)
	tbot.sendMessage(msg)
}

func (tbot *TelegramBot) sendMessage(msg tgbotapi.Chattable) {
	if _, err := tbot.bot.Send(msg); err != nil {
		log.Printf("Error sending message: %v", err)
	}
}
